function slide(row){

    // get rid of zero tiles
    row = filterZero(row); 

    for(let i = 0; i < row.length - 1; i++){
        
        // If two adjacent numbers are equal.
        if(row[i] == row[i+1]){
            // merge them by doubling the first one
            row[i] *= 2;
            // and setting the second one to zero.      
            row[i+1] = 0;       
        }
    } // [2, 2, 2] -> [4, 0, 2]

    //[4, 0, 2] -> [4, 2]
    row = filterZero(row); 

    // Add zeroes back
    // [4,2] -> [4, 2, 0, 0] 
    while(row.length < columns){
        // adds zero on the end of the array.
        row.push(0);
    } 

    return row; // [4,2,0,0]
}


function slideLeft(){

	// iterate through each row
	// check each row
    for(let r = 0; r < rows; r++){
        // The current row is stored in the variable `row`
        let row = board[r] // sample: 0, 2, 2, 2

        // call slide function to merge similar tiles.
        row = slide(row);

        // note: slide function will return a new value for a specific row.
        board[r] = row;  // update the value in the array

        // Update the id of the tile
        // For each tile in the row, the code finds the corresponding HTML element by its ID. It then gets the number from the board array at that row and column, and uses the updateTile function to update the content and appearance of the tile.
        for(let c = 0; c < columns; c++){
            let tile = document.getElementById(r.toString() + "-" + c.toString());
            let num = board[r][c];
            updateTile(tile, num)
        }
    }
}





Joshua

//Declaring our variable
let board;
let score = 0;
let rows = 4;
let columns = 4;

// Create function to set the gameboard
function setGame(){
	// Initialize the 4x4 gameboard with all tiles set to 0
	board = [
		[0,2,2,2],
		[0,0,0,0],
		[0,0,0,0],
		[0,0,0,0]
	];

	// Create the game board tile on the HTML document
	// outer loop is for rows , inner loop for the columns
	for (let r=0; r < rows; r++){
		for(let c=0; c< columns; c++){
			// creating a div element representing a tile
			let tile = document.createElement("div");

			// Setting a unique identifier tile
			// r0c0 > 0 - 0
			tile.id = r.toString() + "-" + c.toString();

			// board is currently set to 0
			let num = board[r][c];

			// Update the tile's appearance base on the num value.
			updateTile(tile, num);

			// Append the tile to the game board container.
			document.getElementById("board").append(tile);
		}
	}
}

// Function to update the appearance of a tile based on its number
function updateTile(tile, num){
	// clear the tile content
	tile.innerText = "";

	// clear the classList to avoid multiple classes
	tile.classList.value = "";

	// add a class named "tile"
	tile.classList.add("tile");
	// This will check for the "num" parameter and will apply specific styling based on the number value.
	// If num is positive, the number is converted to a string and placed inside the tile as text.
	if(num > 0) {
	    // Set the tile's text to the number based on the num value.
	    tile.innerText = num.toString();
	    // if num is less than or equal to 4096, a class based on the number is added to the tile's classlist. 
	    if (num <= 4096){
	        tile.classList.add("x"+num.toString());
	    } else {
	        // if num is greater than 4096, a special  class "x8192" is added.
	        tile.classList.add("x8192");
	    }
	}

}

//event that triggers when web page finishes loading.

window.onload = function() {
	setGame();
}

//Create function for event listeners for your keys sliding (left ,right, up, down)
// "e" represent an event which cotnains information about the action occured.
function handleSlide(e){
	//console.log(e.code);

	// check if the pressed key is one of the arrow keys.
	if(["ArrowLeft","ArrowRight","ArrowUp","ArrowDown"]){

		// prevent dafulat behavior (scrolling on keydown)
	e.preventDefault();

		// this invoke/call a function base on the arrow pressed.
		if(e.code == "ArrowLeft"){
			slideLeft();
		}
		else if (e.code == "ArrowRight") {
			slideRight();
		}
		else if (e.code == "ArrowUp"){
			slideUp();
		}
		else if (e.code == "ArrowDown"){
			slideDown();
		}
	}
}

document.addEventListener("keydown" ,handleSlide);

function filterZero(row) {
	// removing of empty tiles
	return row.filter(num => num != 0);
}

// Core function for sliding and merging tiles (adjacent tile) in a row.
function  slide(row){
	
	// sample: [0,2,2,2]
	row = filterZero(row); // get rid of zeroes valued tiles

	// sample: [2,2,2]
	//check for adjacent equal numbers.
	for (let i = 0 ; i < row.lenght - 1; i++){
		if (row[i] == row[i+1]){
			//double the first element
			row[i] *= 2;
			// and setting the second one to zero
			row[i+1] = 0;
		} // [2,2,2] > [4,0,2]
	}

	// [4,2]
	row = filterZero(row);

	// [4,2] > [4,2,0,0]
	// add zeroes back
	while(row.lenght < columns){
		row.push(0);
	}

	return row;

}

function slideLeft(){
	for (let r=0; r < rows; r++){
		let row = board [r];

		//call the slide function to merge similar tiles
		row = slide(row);

		//update value in the board.
		board [r] = row;

		//update the id tile as well as appearance
		 for(let c = 0; c < columns; c++){
		 	let tile = document.getElementById(r.toString() + "-" + c.toString());
		 	let num = board[r][c];
		 	updateTile(tile, num);
		 }
	}
}

function slideRight(){

}

function slideUp(){
	
}

function slideDown(){
	
}



//Declaring our variable
let board;
let score = 0;
let rows = 4;
let columns = 4;

// Create function to set the gameboard
function setGame(){
	// Initialize the 4x4 gameboard with all tiles set to 0
	board = [
		[0,2,2,2],
		[0,0,0,0],
		[0,0,0,0],
		[0,0,0,0]
	];

	// Create the game board tile on the HTML document
	// outer loop is for rows , inner loop for the columns
	for (let r=0; r < rows; r++){
		for(let c=0; c< columns; c++){
			// creating a div element representing a tile
			let tile = document.createElement("div");

			// Setting a unique identifier tile
			// r0c0 > 0 - 0
			tile.id = r.toString() + "-" + c.toString();

			// board is currently set to 0
			let num = board[r][c];

			// Update the tile's appearance base on the num value.
			updateTile(tile, num);

			// Append the tile to the game board container.
			document.getElementById("board").append(tile);
		}
	}
}

// Function to update the appearance of a tile based on its number
function updateTile(tile, num){
	// clear the tile content
	tile.innerText = "";

	// clear the classList to avoid multiple classes
	tile.classList.value = "";

	// add a class named "tile"
	tile.classList.add("tile");
	// This will check for the "num" parameter and will apply specific styling based on the number value.
	// If num is positive, the number is converted to a string and placed inside the tile as text.
	if(num > 0) {
	    // Set the tile's text to the number based on the num value.
	    tile.innerText = num.toString();
	    // if num is less than or equal to 4096, a class based on the number is added to the tile's classlist. 
	    if (num <= 4096){
	        tile.classList.add("x"+num.toString());
	    } else {
	        // if num is greater than 4096, a special  class "x8192" is added.
	        tile.classList.add("x8192");
	    }
	}

}

//event that triggers when web page finishes loading.

window.onload = function() {
	setGame();
}

//Create function for event listeners for your keys sliding (left ,right, up, down)
// "e" represent an event which cotnains information about the action occured.
function handleSlide(e){
	//console.log(e.code);

	// check if the pressed key is one of the arrow keys.
	if(["ArrowLeft","ArrowRight","ArrowUp","ArrowDown"]){

		// prevent dafulat behavior (scrolling on keydown)
	e.preventDefault();

		// this invoke/call a function base on the arrow pressed.
		if(e.code == "ArrowLeft"){
			slideLeft();
		}
		else if (e.code == "ArrowRight") {
			slideRight();
		}
		else if (e.code == "ArrowUp"){
			slideUp();
		}
		else if (e.code == "ArrowDown"){
			slideDown();
		}
	}
}

document.addEventListener("keydown" ,handleSlide);

function filterZero(row) {
	// removing of empty tiles
	return row.filter(num => num != 0);
}

// Core function for sliding and merging tiles (adjacent tile) in a row.
function  slide(row){
	
	// sample: [0,2,2,2]
	row = filterZero(row); // get rid of zeroes valued tiles

	// sample: [2,2,2]
	//check for adjacent equal numbers.
	for (let i = 0 ; i < row.lenght - 1; i++){
		if (row[i] == row[i+1]){
			//double the first element
			row[i] *= 2;
			// and setting the second one to zero
			row[i+1] = 0;
		} // [2,2,2] > [4,0,2]
	}

	// [4,2]
	row = filterZero(row);

	// [4,2] > [4,2,0,0]
	// add zeroes back
	while(row.length < columns){
		row.push(0);
	}

	return row;

}
function slide(row){

    // get rid of zero tiles
    row = filterZero(row); 

    for(let i = 0; i < row.length - 1; i++){
        
        // If two adjacent numbers are equal.
        if(row[i] == row[i+1]){
            // merge them by doubling the first one
            row[i] *= 2;
            // and setting the second one to zero.      
            row[i+1] = 0;       
        }
    } // [2, 2, 2] -> [4, 0, 2]

    //[4, 0, 2] -> [4, 2]
    row = filterZero(row); 

    // Add zeroes back
    // [4,2] -> [4, 2, 0, 0] 
    while(row.length < columns){
        // adds zero on the end of the array.
        row.push(0);
    } 

    return row; // [4,2,0,0]
}

function slideLeft(){
	for (let r=0; r < rows; r++){
		let row = board [r];

		//call the slide function to merge similar tiles
		row = slide(row);

		//update value in the board.
		board [r] = row;

		//update the id tile as well as appearance
		 for(let c = 0; c < columns; c++){
		 	let tile = document.getElementById(r.toString() + "-" + c.toString());
		 	let num = board[r][c];
		 	updateTile(tile, num);
		 }
	}
}

function slideRight(){

}

function slideUp(){
	
}

function slideDown(){
	
}


// pa check po sana nagkaroon po 10 mins power interruption samin baka may namali po tnxxxx


//Declaring variable

let board; 
let score = 0;
let rows = 4;
let columns = 4;

// create function to set the gameboard

function setGame(){
    // Initialize the 4x4 game board with all tiles set to 0

	board = [
		[0,2,2,2],
		[0,0,0,0],
		[0,0,0,0],
		[0,0,0,0]
	]

    // Create the gameboard tile on the HTML document
// outer loop is for rows, inner loop for the columns


    for(let r=0; r < rows; r++){
        for(let c=0; c < columns; c++){
            // creating a div element  representing a tile

            let tile = document.createElement("div");

            // settting a unique identifier

            tile.id = r.toString() + "-" + c.toString();

            // board is currently set to 0

            let num = board[r][c];

            // Update the tiles appearance based on the num value.

            updateTile(tile, num);

            //Append the tile to the gameboard container.

            document.getElementById("board").append(tile);

        


        }
    }
}
function updateTile(tile, num){
    //clear the tile content
    tile.innerText = "";

    // clear the classList to avoid multiple classes

    tile.classList.value = "";

    //  add a class named "tile"
    tile.classList.add("tile");

    // This will check for the "num" parameter and will apply specific styling based on the number value.
// If num is positive, the number is converted to a string and placed inside the tile as text.
if(num > 0); {
    // Set the tile's text to the number based on the num value.
    tile.innerText = num.toString();
    // if num is less than or equal to 4096, a class based on the number is added to the tile's classlist. 
    if (num <= 4096){
        tile.classList.add("x"+num.toString());
    } else {
        // if num is greater than 4096, a special  class "x8192" is added.
        tile.classList.add("x8192");
    }
}
}



// event that triggers when web page finishes loading.
window.onload = function(){
    setGame();
}


// create event function for event listeners 

// "e" represents an event, which contains information about the action occured.
function handleSlide(e){
    //console.log(e.code);

 

    // it will check if the pressed key is one of the arrow keys

    if(["ArrowLeft","ArrowRight","ArrowUp", "ArrowDown"])

// prevent default behavior
   e.preventDefault();


//    this invoke a function based on the arrow pressed.
if(e.code == "ArrowLeft"){
slideLeft();
}
else if(e.code == "ArrowRight"){
slideRight();
}
else if(e.code == "ArrowUp"){
slideUp();
}
else if(e.code == "ArrowDown"){
slideDown();
}

    
}

document.addEventListener("keydown", handleSlide);




function filterZero(row){
    return row.filter(num => num !=0)

}
// Core function for sliding and merging tiles in a (adjacent)row

function slide(row){

    row = filterZero(row); // get rid of zero 
    
    for (let i = 0;  row.length - 1; i++){
        if(row [i] == row[i+1]){

            // double the first element
            row[i] *= 2;
            // and setting the second one to zero
            row[i+1] = 0;
        } //row [2,2,2] -> [4,0,2]
    }

    // [4,2]
    row = filterZero(row);  


    // [4,2] -> [4,2,0,0]
    // add zeroes back
    while(row.length < columns){
        row.push(0)
    }
    return row;
}

function slideLeft(){
    // iterate through each row
    // check each row
    for(let r=0; r<rows; r++){
        let row = board[r];

        // call the slide function to merge similar tiles

        row = slide(row);

        // updated value in the board.
        board[r] = row;

        // Update the id of the tile as well as appearance.

        for(let c = o; c < columns; c++){
            let tile = document.getElementById(r.toString() + "-" + c.toString());

            let num = board[r][c];
            updateTile(tile, num);


        }


    }
}

function slideRight(){
    
}
function slideUp(){
    
}
function slideDown(){
    
}





// pa check po sana nagkaroon po 10 mins power interruption samin baka may namali po tnxxxx


//Declaring variable

let board; 
let score = 0;
let rows = 4;
let columns = 4;

// create function to set the gameboard

function setGame(){
    // Initialize the 4x4 game board with all tiles set to 0

	board = [
		[0,2,2,2],
		[0,0,0,0],
		[0,0,0,0],
		[0,0,0,0]
	]

    // Create the gameboard tile on the HTML document
// outer loop is for rows, inner loop for the columns


    for(let r=0; r < rows; r++){
        for(let c=0; c < columns; c++){
            // creating a div element  representing a tile

            let tile = document.createElement("div");

            // settting a unique identifier

            tile.id = r.toString() + "-" + c.toString();

            // board is currently set to 0

            let num = board[r][c];

            // Update the tiles appearance based on the num value.

            updateTile(tile, num);

            //Append the tile to the gameboard container.

            document.getElementById("board").append(tile);

        


        }
    }
}
function updateTile(tile, num){
    //clear the tile content
    tile.innerText = "";

    // clear the classList to avoid multiple classes

    tile.classList.value = "";

    //  add a class named "tile"
    tile.classList.add("tile");

    // This will check for the "num" parameter and will apply specific styling based on the number value.
// If num is positive, the number is converted to a string and placed inside the tile as text.
if(num > 0); {
    // Set the tile's text to the number based on the num value.
    tile.innerText = num.toString();
    // if num is less than or equal to 4096, a class based on the number is added to the tile's classlist. 
    if (num <= 4096){
        tile.classList.add("x"+num.toString());
    } else {
        // if num is greater than 4096, a special  class "x8192" is added.
        tile.classList.add("x8192");
    }
}
}



// event that triggers when web page finishes loading.
window.onload = function(){
    setGame();
}


// create event function for event listeners 

// "e" represents an event, which contains information about the action occured.
function handleSlide(e){
    //console.log(e.code);

 

    // it will check if the pressed key is one of the arrow keys

    if(["ArrowLeft","ArrowRight","ArrowUp", "ArrowDown"])

// prevent default behavior
   e.preventDefault();


//    this invoke a function based on the arrow pressed.
if(e.code == "ArrowLeft"){
slideLeft();
}
else if(e.code == "ArrowRight"){
slideRight();
}
else if(e.code == "ArrowUp"){
slideUp();
}
else if(e.code == "ArrowDown"){
slideDown();
}

    
}

document.addEventListener("keydown", handleSlide);




function filterZero(row){
    return row.filter(num => num !=0)

}
// Core function for sliding and merging tiles in a (adjacent)row

function slide(row){

    row = filterZero(row); // get rid of zero 
    
    for (let i = 0;  row.length - 1; i++){
        if(row [i] == row[i+1]){

            // double the first element
            row[i] *= 2;
            // and setting the second one to zero
            row[i+1] = 0;
        } //row [2,2,2] -> [4,0,2]
    }

    // [4,2]
    row = filterZero(row);  


    // [4,2] -> [4,2,0,0]
    // add zeroes back
    while(row.length < columns){
        row.push(0)
    }
    return row;
}

function slideLeft(){
    // iterate through each row
    // check each row
    for(let r=0; r<rows; r++){
        let row = board[r];

        // call the slide function to merge similar tiles

        row = slide(row);

        // updated value in the board.
        board[r] = row;

        // Update the id of the tile as well as appearance.

        for(let c = o; c < columns; c++){
            let tile = document.getElementById(r.toString() + "-" + c.toString());

            let num = board[r][c];
            updateTile(tile, num);


        }


    }
}

function slideRight(){
    
}
function slideUp(){
    
}
function slideDown(){
    
}





// pa check po sana nagkaroon po 10 mins power interruption samin baka may namali po tnxxxx


//Declaring variable

let board; 
let score = 0;
let rows = 4;
let columns = 4;

// create function to set the gameboard

function setGame(){
    // Initialize the 4x4 game board with all tiles set to 0

	board = [
		[0,2,2,2],
		[0,0,0,0],
		[0,0,0,0],
		[0,0,0,0]
	]

    // Create the gameboard tile on the HTML document
// outer loop is for rows, inner loop for the columns


    for(let r=0; r < rows; r++){
        for(let c=0; c < columns; c++){
            // creating a div element  representing a tile

            let tile = document.createElement("div");

            // settting a unique identifier

            tile.id = r.toString() + "-" + c.toString();

            // board is currently set to 0

            let num = board[r][c];

            // Update the tiles appearance based on the num value.

            updateTile(tile, num);

            //Append the tile to the gameboard container.

            document.getElementById("board").append(tile);

        


        }
    }
}
function updateTile(tile, num){
    //clear the tile content
    tile.innerText = "";

    // clear the classList to avoid multiple classes

    tile.classList.value = "";

    //  add a class named "tile"
    tile.classList.add("tile");

    // This will check for the "num" parameter and will apply specific styling based on the number value.
// If num is positive, the number is converted to a string and placed inside the tile as text.
if(num > 0); {
    // Set the tile's text to the number based on the num value.
    tile.innerText = num.toString();
    // if num is less than or equal to 4096, a class based on the number is added to the tile's classlist. 
    if (num <= 4096){
        tile.classList.add("x"+num.toString());
    } else {
        // if num is greater than 4096, a special  class "x8192" is added.
        tile.classList.add("x8192");
    }
}
}



// event that triggers when web page finishes loading.
window.onload = function(){
    setGame();
}


// create event function for event listeners 

// "e" represents an event, which contains information about the action occured.
function handleSlide(e){
    //console.log(e.code);

 

    // it will check if the pressed key is one of the arrow keys

    if(["ArrowLeft","ArrowRight","ArrowUp", "ArrowDown"])

// prevent default behavior
   e.preventDefault();


//    this invoke a function based on the arrow pressed.
if(e.code == "ArrowLeft"){
slideLeft();
}
else if(e.code == "ArrowRight"){
slideRight();
}
else if(e.code == "ArrowUp"){
slideUp();
}
else if(e.code == "ArrowDown"){
slideDown();
}

    
}

document.addEventListener("keydown", handleSlide);




function filterZero(row){
    return row.filter(num => num !=0)

}
// Core function for sliding and merging tiles in a (adjacent)row

function slide(row){

    row = filterZero(row); // get rid of zero 
    
    for (let i = 0;  row.length - 1; i++){
        if(row [i] == row[i+1]){

            // double the first element
            row[i] *= 2;
            // and setting the second one to zero
            row[i+1] = 0;
        } //row [2,2,2] -> [4,0,2]
    }

    // [4,2]
    row = filterZero(row);  


    // [4,2] -> [4,2,0,0]
    // add zeroes back
    while(row.length < columns){
        row.push(0)
    }
    return row;
}

function slideLeft(){
    // iterate through each row
    // check each row
    for(let r=0; r<rows; r++){
        let row = board[r];

        // call the slide function to merge similar tiles

        row = slide(row);

        // updated value in the board.
        board[r] = row;

        // Update the id of the tile as well as appearance.

        for(let c = o; c < columns; c++){
            let tile = document.getElementById(r.toString() + "-" + c.toString());

            let num = board[r][c];
            updateTile(tile, num);


        }


    }
}

function slideRight(){
    
}
function slideUp(){
    
}
function slideDown(){
    
}





//Declaring our variable
let board;
let score = 0;
let rows = 4;
let columns = 4;

// Create function to set the gameboard
function setGame(){
	// Initialize the 4x4 gameboard with all tiles set to 0
	board = [
		[0,2,2,2],
		[0,0,0,0],
		[0,0,0,0],
		[0,0,0,0]
	];

	// Create the game board tile on the HTML document
	// outer loop is for rows , inner loop for the columns
	for (let r=0; r < rows; r++){
		for(let c=0; c< columns; c++){
			// creating a div element representing a tile
			let tile = document.createElement("div");

			// Setting a unique identifier tile
			// r0c0 > 0 - 0
			tile.id = r.toString() + "-" + c.toString();

			// board is currently set to 0
			let num = board[r][c];

			// Update the tile's appearance base on the num value.
			updateTile(tile, num);

			// Append the tile to the game board container.
			document.getElementById("board").append(tile);
		}
	}
}

// Function to update the appearance of a tile based on its number
function updateTile(tile, num){
	// clear the tile content
	tile.innerText = "";

	// clear the classList to avoid multiple classes
	tile.classList.value = "";

	// add a class named "tile"
	tile.classList.add("tile");
	// This will check for the "num" parameter and will apply specific styling based on the number value.
	// If num is positive, the number is converted to a string and placed inside the tile as text.
	if(num > 0) {
	    // Set the tile's text to the number based on the num value.
	    tile.innerText = num.toString();
	    // if num is less than or equal to 4096, a class based on the number is added to the tile's classlist. 
	    if (num <= 4096){
	        tile.classList.add("x"+num.toString());
	    } else {
	        // if num is greater than 4096, a special  class "x8192" is added.
	        tile.classList.add("x8192");
	    }
	}

}

//event that triggers when web page finishes loading.

window.onload = function() {
	setGame();
}

//Create function for event listeners for your keys sliding (left ,right, up, down)
// "e" represent an event which cotnains information about the action occured.
function handleSlide(e){
	//console.log(e.code);

	// check if the pressed key is one of the arrow keys.
	if(["ArrowLeft","ArrowRight","ArrowUp","ArrowDown"]){

		// prevent dafulat behavior (scrolling on keydown)
	e.preventDefault();

		// this invoke/call a function base on the arrow pressed.
		if(e.code == "ArrowLeft"){
			slideLeft();
		}
		else if (e.code == "ArrowRight") {
			slideRight();
		}
		else if (e.code == "ArrowUp"){
			slideUp();
		}
		else if (e.code == "ArrowDown"){
			slideDown();
		}
	}
}

document.addEventListener("keydown" ,handleSlide);

function filterZero(row) {
	// removing of empty tiles
	return row.filter(num => num != 0);
}

// Core function for sliding and merging tiles (adjacent tile) in a row.
function  slide(row){
	
	// sample: [0,2,2,2]
	row = filterZero(row); // get rid of zeroes valued tiles

	// sample: [2,2,2]
	//check for adjacent equal numbers.
	for (let i = 0 ; i < row.length - 1; i++){
		if (row[i] == row[i+1]){
			//double the first element
			row[i] *= 2;
			// and setting the second one to zero
			row[i+1] = 0;
		} // [2,2,2] > [4,0,2]
	}

	// [4,2]
	row = filterZero(row);

	// [4,2] > [4,2,0,0]
	// add zeroes back
	while(row.lenght < columns){
		row.push(0);
	}

	return row;

}

function slideLeft(){
	for (let r=0; r < rows; r++){
		let row = board [r];

		//call the slide function to merge similar tiles
		row = slide(row);

		//update value in the board.
		board [r] = row;

		//update the id tile as well as appearance
		 for(let c = 0; c < columns; c++){
		 	let tile = document.getElementById(r.toString() + "-" + c.toString());
		 	let num = board[r][c];
		 	updateTile(tile, num);
		 }
	}
}


//Declaring our variable
let board;
let score = 0;
let rows = 4;
let columns = 4;

// Create function to set the gameboard
function setGame(){
	// Initialize the 4x4 gameboard with all tiles set to 0
	board = [
		[0,2,2,2],
		[0,0,0,0],
		[0,0,0,0],
		[0,0,0,0]
	];

	// Create the game board tile on the HTML document
	// outer loop is for rows , inner loop for the columns
	for (let r=0; r < rows; r++){
		for(let c=0; c< columns; c++){
			// creating a div element representing a tile
			let tile = document.createElement("div");

			// Setting a unique identifier tile
			// r0c0 > 0 - 0
			tile.id = r.toString() + "-" + c.toString();

			// board is currently set to 0
			let num = board[r][c];

			// Update the tile's appearance base on the num value.
			updateTile(tile, num);

			// Append the tile to the game board container.
			document.getElementById("board").append(tile);
		}
	}
}

// Function to update the appearance of a tile based on its number
function updateTile(tile, num){
	// clear the tile content
	tile.innerText = "";

	// clear the classList to avoid multiple classes
	tile.classList.value = "";

	// add a class named "tile"
	tile.classList.add("tile");
	// This will check for the "num" parameter and will apply specific styling based on the number value.
	// If num is positive, the number is converted to a string and placed inside the tile as text.
	if(num > 0) {
	    // Set the tile's text to the number based on the num value.
	    tile.innerText = num.toString();
	    // if num is less than or equal to 4096, a class based on the number is added to the tile's classlist. 
	    if (num <= 4096){
	        tile.classList.add("x"+num.toString());
	    } else {
	        // if num is greater than 4096, a special  class "x8192" is added.
	        tile.classList.add("x8192");
	    }
	}

}

//event that triggers when web page finishes loading.

window.onload = function() {
	setGame();
}

//Create function for event listeners for your keys sliding (left ,right, up, down)
// "e" represent an event which cotnains information about the action occured.
function handleSlide(e){
	//console.log(e.code);

	// check if the pressed key is one of the arrow keys.
	if(["ArrowLeft","ArrowRight","ArrowUp","ArrowDown"]){

		// prevent dafulat behavior (scrolling on keydown)
	e.preventDefault();

		// this invoke/call a function base on the arrow pressed.
		if(e.code == "ArrowLeft"){
			slideLeft();
		}
		else if (e.code == "ArrowRight") {
			slideRight();
		}
		else if (e.code == "ArrowUp"){
			slideUp();
		}
		else if (e.code == "ArrowDown"){
			slideDown();
		}
	}
}

document.addEventListener("keydown" ,handleSlide);

function filterZero(row) {
	// removing of empty tiles
	return row.filter(num => num != 0);
}

// Core function for sliding and merging tiles (adjacent tile) in a row.
function  slide(row){
	
	// sample: [0,2,2,2]
	row = filterZero(row); // get rid of zeroes valued tiles

	// sample: [2,2,2]
	//check for adjacent equal numbers.
	for (let i = 0 ; i < row.length - 1; i++){
		if (row[i] == row[i+1]){
			//double the first element
			row[i] *= 2;
			// and setting the second one to zero
			row[i+1] = 0;
		} // [2,2,2] > [4,0,2]
	}

	// [4,2]
	row = filterZero(row);

	// [4,2] > [4,2,0,0]
	// add zeroes back
	while(row.lenght < columns){
		row.push(0);
	}

	return row;

}

function slideLeft(){
	for (let r=0; r < rows; r++){
		let row = board [r];

		//call the slide function to merge similar tiles
		row = slide(row);

		//update value in the board.
		board [r] = row;

		//update the id tile as well as appearance
		 for(let c = 0; c < columns; c++){
		 	let tile = document.getElementById(r.toString() + "-" + c.toString());
		 	let num = board[r][c];
		 	updateTile(tile, num);
		 }
	}
}

function slideRight(){

}

function slideUp(){
	
}

function slideDown(){
	
}



function slideRight(){

}

function slideUp(){
	
}

function slideDown(){
	
}


